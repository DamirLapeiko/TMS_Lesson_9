package by.teachmeskills.lapeiko.homework9.utils;

import java.util.Scanner;

public class StringUtils {
    /* Task1
–û–±—ä—è–≤–∏ –≤ StringUtils —Ñ—É–Ω–∫—Ü–∏—é print, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ (—Å—Ç—Ä–æ–∫—É)
–∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∫ —Å–∏–º–≤–æ–ª—ã, –∏–¥—É—â–∏–µ –ø–æ–¥—Ä—è–¥ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º.
–û–±—ä—è–≤–∏ –≤ StringUtils —Ñ—É–Ω–∫—Ü–∏—é println, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç —Ç–æ –∂–µ, —á—Ç–æ –∏ print,
–Ω–æ –µ—â—ë –≤—ã–≤–æ–¥–∏—Ç —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ.
 */
    public static void print(char[] chars) {
        for (char i : chars) {
            System.out.println(i);
        }
    }

    public static void println(char[] chars) {
        print(chars);
        System.out.print('\n');
    }

    /* Task2
    –û–±—ä—è–≤–∏ –≤ StringUtils —Ñ—É–Ω–∫—Ü–∏—é isBlank,
    –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ (—Å—Ç—Ä–æ–∫—É) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç,
    —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–æ–π. –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç–æ–π,
    –µ—Å–ª–∏ —É –Ω–µ—ë –¥–ª–∏–Ω–∞ 0 –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
     */
    public static boolean isBlank(char[] chars) {
        for (char i = 0; i < chars.length; i++) {
            if (!Character.isWhitespace(i)) {
                return false;
            }
        }
        return true;
    }

    /* Task3
    –û–±—ä—è–≤–∏ —Ñ—É–Ω–∫—Ü–∏—é isRussian, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
    –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –æ–Ω
    –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
     */
    public static boolean isRussian(char[] chars) {
        boolean isRussian = false;
        for (char i = 0; i < chars.length; i++) {
            if ((chars[i] >= '–ê' && chars[i] <= '—è') || chars[i] == '—ë' ||
                    chars[i] == '–Å') {
                isRussian = true;
            } else {
                isRussian = false;
            }
        }
        return isRussian;
    }

    /* Task4
    –û–±—ä—è–≤–∏ –≤ StringUtils —Ñ—É–Ω–∫—Ü–∏—é contains,
    –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –º–∞—Å—Å–∏–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç,
    —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–º –ø–µ—Ä–≤–æ–≥–æ. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏,
    —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —É—á–∞—Å—Ç–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–π 1-–≤-1
    —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ù–∞–ø—Ä–∏–º–µ—Ä, ¬´Hello¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´ell¬ª,
    ¬´Hello world¬ª —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´world¬ª, ¬´Hello¬ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ¬´Hi¬ª.
    */
    public static boolean contains(char[] chars, char[] subChars) {
        if (chars.length == 0 || subChars.length > chars.length) {
            throw new IllegalArgumentException("Error. Verify your program.");
        }
        int sum = 0;
        for (int i = 0; i < chars.length - 1; i++) {
            for (int j = 0; j < subChars.length; j++) {
                if (chars[i + j] != subChars[j]) {
                    break;
                } else {
                    sum++;
                }
            }
            if (sum == subChars.length) {
                return true;
            }
        }
        return false;
    }
    /* Task5
    –û–±—ä—è–≤–∏ –≤ StringUtils —Ñ—É–Ω–∫—Ü–∏—é parseInt, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤
    —Å–∏–º–≤–æ–ª–æ–≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ü–∏—Ñ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int —á–∏—Å–ª–æ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –≤ —Å—Ç—Ä–æ–∫–µ.
    –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ¬´1295¬ª –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è int —á–∏—Å–ª–æ 1295.
    üõü –ü–æ–¥—Å–∫–∞–∑–∫–∞:
    –í Unicode —Å–∏–º–≤–æ–ª—ã —Ü–∏—Ñ—Ä –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥ –ø–æ-–æ—á–µ—Ä–µ–¥–∏ –æ—Ç '0' –¥–æ '9'.
    –°–∏–º–≤–æ–ª –≤ Java ‚Äì —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö. –û–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ
    –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏–µ.
    üõü –ü–æ–¥—Å–∫–∞–∑–∫–∞:
    –í–µ—Ä–æ—è—Ç–Ω–æ, —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç–µ–ø–µ–Ω–∏ —á–∏—Å–ª–∞ 10.
    –î–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è int Math.pow(int, int).
    Pow ‚Äì —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç power.
         */
//        public static void parseInt (char[] chars){
//        }
    public static char[] getCharArray(){
        Scanner sc = new Scanner(System.in);
        return sc.nextLine().toCharArray();
    }
}


